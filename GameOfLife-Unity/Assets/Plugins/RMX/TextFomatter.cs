// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
namespace RMX
{

	public static class TextFormatter {

		public enum Settings {
			ForDebug, DebugAndCode, Codify, Default
		}

		public enum Method {
			CreateTags, TagsOnly, Default
		}

		public static string TagNew = "__new__"; 
		
		private static string debug(string log) {
			log = log.TrimStart('\n');
			log = log.Replace ("_LATE_", "<color=purple>_LATE_</color>");
			log = log.Replace ("Failed", "<color=red>FAILED</color>");
			log = log.Replace ("Failure", "<color=red>FAILURE</color>");
			log = log.Replace ("succeeded", "<color=green>SUCCEEDED</color>");
			log = log.Replace ("successful", "<color=green>SUCCESSFUL</color>");
			log = log.Replace ("complete", "<color=green>COMPLETE</color>");
			log = log.Replace ("completed", "<color=green>COMPLETED</color>");
			log = log.Replace (" success", "<color=green> SUCCESS</color>");
			log = log.Replace (" success", "<color=green> SUCCESS</color>");
			log = log.Replace (" True", "<color=green> TRUE</color>");
			log = log.Replace (" False", "<color=red> FALSE</color>");
			return log;
		}

		private static string codify(string code, Method method) {
			if (method == Method.CreateTags) {
				code = code.Replace (" new ", TagNew);

			}
			code = code.Replace(TagNew, "<color=cyan>new</color>");
			code = code.Replace ("()", "<color=brown>()</color>");
			
			return code;
		}

		public static string Format(string text) {
			return Format (text, Settings.Default, Method.Default);
		}

		public static string Format(string text, Settings settings, Method method) {
			switch (settings) {
			case Settings.ForDebug:
				return debug(text);
			case Settings.DebugAndCode:
				return codify(debug(text), method);
			case Settings.Codify:
				return codify(text, method);
			default:
				return Format (text, Settings.ForDebug, Method.CreateTags);
			}
		}
	}

}

